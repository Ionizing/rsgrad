use std::{
    fs,
    path::PathBuf,
    collections::HashMap,
};

use structopt::{
    StructOpt,
    clap::AppSettings,
};
use log::{
    info,
};
use serde::{
    Serialize,
    Deserialize,
};
use anyhow::{
    Error,
    bail,
};
use toml;

use crate::{
    Result,
    OptProcess,
    Procar,
    Outcar,
    vasp_parsers::outcar::GetEFermi,
};


#[derive(Clone, Serialize, Deserialize)]
struct RawSelection {
    spins:      Option<String>,
    kpoints:    Option<String>,
    atoms:      Option<String>,
    orbits:     Option<String>,
}


#[derive(Clone)]
struct Selection {
    label:      String,
    ispins:     Vec<i32>,
    ikpoints:   Vec<i32>,
    iatoms:     Vec<i32>,
    iorbits:    Vec<i32>,
}


trait ToSelection<F, T> { fn to_selection(f: F) -> T; }
impl ToSelection<HashMap<String, RawSelection>, Vec<Selection>> for HashMap<String, RawSelection> {
    fn to_selection(f: HashMap<String, RawSelection>) -> Vec<Selection> {
        todo!();
    }
}


#[derive(Clone, Serialize, Deserialize)]
struct Configuration {
    #[serde(default = "Configuration::sigma_default")]
    sigma: f64,

    #[serde(default = "Configuration::procar_default")]
    procar: PathBuf,

    #[serde(default = "Configuration::outcar_default")]
    outcar: PathBuf,

    #[serde(default = "Configuration::txtout_default")]
    txtout: PathBuf,

    #[serde(default = "Configuration::htmlout_default")]
    htmlout: PathBuf,

    #[serde(default = "Configuration::notot_default")]
    notot: bool,

    pdos: Option<HashMap<String, RawSelection>>,
}

impl Configuration {
    pub fn sigma_default() -> f64 { 0.05 }
    pub fn procar_default() -> PathBuf { PathBuf::from("./PROCAR") }
    pub fn outcar_default() -> PathBuf { PathBuf::from("./OUTCAR") }
    pub fn txtout_default() -> PathBuf { PathBuf::from("./dos_raw.txt") }
    pub fn htmlout_default() -> PathBuf { PathBuf::from("./dos.html") }
    pub fn notot_default()  -> bool { false }
}



#[derive(Debug, StructOpt, Clone)]
#[structopt(setting = AppSettings::ColoredHelp,
            setting = AppSettings::ColorAuto)]
/// Calculate density of states from PROCAR and OUTCAR.
///
/// The fermi level is extracted from OUTCAR, and DOS is calculated by
/// smearing the band levels from PROCAR. The result may differ from DOSCAR.
pub struct Dos {
    #[structopt(short, long)]
    /// Projected DOS configuration file path.
    ///
    /// If left empty, only total DOS is calculated. The configuration template
    /// can be generated by `--gen-template` and then you can follow it.
    config: Option<PathBuf>,

    #[structopt(long)]
    /// Generate projected DOS configuration template.
    gen_template: bool,

    #[structopt(long, default_value = "./OUTCAR")]
    /// OUTCAR path
    outcar: PathBuf,

    #[structopt(long, default_value = "./PROCAR")]
    /// PROCAR path
    procar: PathBuf,

    #[structopt(long, default_value = "dos_raw.txt")]
    /// Save the raw data of projected DOS. Then you can replot it with more advanced tools.
    txtout: PathBuf,

    #[structopt(long, default_value = "dos.html")]
    /// Save the projected DOS plot as HTML. Then you can view it in the browser.
    ///
    /// Note: Your browser should be able to run plotly.js. Chrome, Safari, Edge, Firefox and
    /// etc. are supported.
    htmlout: PathBuf,
}


const TEMPLATE: &'static str = r#"# rsgrad DOS configuration in toml format.
#sigma = 0.05                    # smearing width
#procar      = "PROCAR"          # pROCAR path
#outcar      = "OUTCAR"          # oUTCAR path
#txtout      = "dos_raw.txt"     # save the raw data as "dos_raw.txt"
#htmlout     = "dos.html"        # save the pdos plot as "dos.html"
#notot       = false             # plot the total dos

#[pdos.plot1]     # One label produces one plot, the labels CANNOT be repetitive.
#spins   = "up down"         # for ISPIN = 2 system, "up" and "down" are available,
#                            # for LSORBIT = .TRUE. system, "x" "y" "z" and "tot" are available.
#kpoints = "1 3..7 -1"       # selects 1 3 4 5 6 7 and the last kpoint for pdos plot.
#atoms   = "1 3..7 -1"       # selects 1 3 4 5 6 7 and the last atoms' projection for pdos plot.
#orbits  = "s px dx"         # selects the s px and dx orbits' projection for pdos plot.

# The fields can be left blank, if you want select all the components for some fields,
# just comment them. You can comment fields with '#'
"#;


impl OptProcess for Dos {
    fn process(&self) -> Result<()> {
        if self.gen_template {
            let conf_filename = PathBuf::from("./dos.toml");

            info!("Generating selection dos configuration template ...");
            fs::write(&conf_filename, TEMPLATE.as_bytes())?;
            info!("Template file written to {:?}. Exiting", &conf_filename);
            
            return Ok(());
        }

        Ok(())
    }
}



#[cfg(test)]
mod test {
    use super::*;
    
    #[test]
    fn test_parse_rawconfig() {
        let _: Configuration = toml::from_str(TEMPLATE).unwrap();
    }
}
